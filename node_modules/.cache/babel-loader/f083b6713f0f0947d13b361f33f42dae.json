{"ast":null,"code":"import firebase, { db } from './config';\nexport const addDocument = (collection, data) => {\n  const query = db.collection(collection);\n  query.add({ ...data,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  });\n}; // tao keywords cho displayName, su dung cho search\n\nexport const generateKeywords = displayName => {\n  // liet ke tat cac hoan vi. vd: name = [\"David\", \"Van\", \"Teo\"]\n  // => [\"David\", \"Van\", \"Teo\"], [\"David\", \"Teo\", \"Van\"], [\"Teo\", \"David\", \"Van\"],...\n  const name = displayName.split(' ').filter(word => word);\n  const length = name.length;\n  let flagArray = [];\n  let result = [];\n  let stringArray = [];\n  /**\r\n   * khoi tao mang flag false\r\n   * dung de danh dau xem gia tri\r\n   * tai vi tri nay da duoc su dung\r\n   * hay chua\r\n   **/\n\n  for (let i = 0; i < length; i++) {\n    flagArray[i] = false;\n  }\n\n  const createKeywords = name => {\n    const arrName = [];\n    let curName = '';\n    name.split('').forEach(letter => {\n      curName += letter;\n      arrName.push(curName);\n    });\n    return arrName;\n  };\n\n  function findPermutation(k) {\n    for (let i = 0; i < length; i++) {\n      if (!flagArray[i]) {\n        flagArray[i] = true;\n        result[k] = name[i];\n\n        if (k === length - 1) {\n          stringArray.push(result.join(' '));\n        }\n\n        findPermutation(k + 1);\n        flagArray[i] = false;\n      }\n    }\n  }\n\n  findPermutation(0);\n  const keywords = stringArray.reduce((acc, cur) => {\n    const words = createKeywords(cur);\n    return [...acc, ...words];\n  }, []);\n  return keywords;\n};","map":{"version":3,"sources":["C:/Users/DELL/fun-chat/src/firebase/services.js"],"names":["firebase","db","addDocument","collection","data","query","add","createdAt","firestore","FieldValue","serverTimestamp","generateKeywords","displayName","name","split","filter","word","length","flagArray","result","stringArray","i","createKeywords","arrName","curName","forEach","letter","push","findPermutation","k","join","keywords","reduce","acc","cur","words"],"mappings":"AAAA,OAAOA,QAAP,IAAmBC,EAAnB,QAA6B,UAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAC/C,QAAMC,KAAK,GAAGJ,EAAE,CAACE,UAAH,CAAcA,UAAd,CAAd;AAEAE,EAAAA,KAAK,CAACC,GAAN,CAAU,EACR,GAAGF,IADK;AAERG,IAAAA,SAAS,EAAEP,QAAQ,CAACQ,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B;AAFH,GAAV;AAID,CAPM,C,CASP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,IAAiB;AAC/C;AACA;AACA,QAAMC,IAAI,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,EAAuBC,MAAvB,CAA+BC,IAAD,IAAUA,IAAxC,CAAb;AAEA,QAAMC,MAAM,GAAGJ,IAAI,CAACI,MAApB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,WAAW,GAAG,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/BH,IAAAA,SAAS,CAACG,CAAD,CAAT,GAAe,KAAf;AACD;;AAED,QAAMC,cAAc,GAAIT,IAAD,IAAU;AAC/B,UAAMU,OAAO,GAAG,EAAhB;AACA,QAAIC,OAAO,GAAG,EAAd;AACAX,IAAAA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeW,OAAf,CAAwBC,MAAD,IAAY;AACjCF,MAAAA,OAAO,IAAIE,MAAX;AACAH,MAAAA,OAAO,CAACI,IAAR,CAAaH,OAAb;AACD,KAHD;AAIA,WAAOD,OAAP;AACD,GARD;;AAUA,WAASK,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/B,UAAI,CAACH,SAAS,CAACG,CAAD,CAAd,EAAmB;AACjBH,QAAAA,SAAS,CAACG,CAAD,CAAT,GAAe,IAAf;AACAF,QAAAA,MAAM,CAACU,CAAD,CAAN,GAAYhB,IAAI,CAACQ,CAAD,CAAhB;;AAEA,YAAIQ,CAAC,KAAKZ,MAAM,GAAG,CAAnB,EAAsB;AACpBG,UAAAA,WAAW,CAACO,IAAZ,CAAiBR,MAAM,CAACW,IAAP,CAAY,GAAZ,CAAjB;AACD;;AAEDF,QAAAA,eAAe,CAACC,CAAC,GAAG,CAAL,CAAf;AACAX,QAAAA,SAAS,CAACG,CAAD,CAAT,GAAe,KAAf;AACD;AACF;AACF;;AAEDO,EAAAA,eAAe,CAAC,CAAD,CAAf;AAEA,QAAMG,QAAQ,GAAGX,WAAW,CAACY,MAAZ,CAAmB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChD,UAAMC,KAAK,GAAGb,cAAc,CAACY,GAAD,CAA5B;AACA,WAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGE,KAAZ,CAAP;AACD,GAHgB,EAGd,EAHc,CAAjB;AAKA,SAAOJ,QAAP;AACD,CAtDM","sourcesContent":["import firebase, { db } from './config';\r\n\r\nexport const addDocument = (collection, data) => {\r\n  const query = db.collection(collection);\r\n\r\n  query.add({\r\n    ...data,\r\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n  });\r\n};\r\n\r\n// tao keywords cho displayName, su dung cho search\r\nexport const generateKeywords = (displayName) => {\r\n  // liet ke tat cac hoan vi. vd: name = [\"David\", \"Van\", \"Teo\"]\r\n  // => [\"David\", \"Van\", \"Teo\"], [\"David\", \"Teo\", \"Van\"], [\"Teo\", \"David\", \"Van\"],...\r\n  const name = displayName.split(' ').filter((word) => word);\r\n\r\n  const length = name.length;\r\n  let flagArray = [];\r\n  let result = [];\r\n  let stringArray = [];\r\n\r\n  /**\r\n   * khoi tao mang flag false\r\n   * dung de danh dau xem gia tri\r\n   * tai vi tri nay da duoc su dung\r\n   * hay chua\r\n   **/\r\n  for (let i = 0; i < length; i++) {\r\n    flagArray[i] = false;\r\n  }\r\n\r\n  const createKeywords = (name) => {\r\n    const arrName = [];\r\n    let curName = '';\r\n    name.split('').forEach((letter) => {\r\n      curName += letter;\r\n      arrName.push(curName);\r\n    });\r\n    return arrName;\r\n  };\r\n\r\n  function findPermutation(k) {\r\n    for (let i = 0; i < length; i++) {\r\n      if (!flagArray[i]) {\r\n        flagArray[i] = true;\r\n        result[k] = name[i];\r\n\r\n        if (k === length - 1) {\r\n          stringArray.push(result.join(' '));\r\n        }\r\n\r\n        findPermutation(k + 1);\r\n        flagArray[i] = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  findPermutation(0);\r\n\r\n  const keywords = stringArray.reduce((acc, cur) => {\r\n    const words = createKeywords(cur);\r\n    return [...acc, ...words];\r\n  }, []);\r\n\r\n  return keywords;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}